#les settings peuvent activer certaines options
#nous ne nous en servons pas pour l'instant --> []
settings:[]

#Comment paramétrer un glossaire?
glossary:
  #Nom à afficher pour le glossaire
  title: 'Glossaire'
  #liste des termes à afficher
  terms: [
    #1er terme
    term: "Data"
    #et sa définition
    meaning: "An android from the 24th century who serves on the star ship Enterprise.<br><em>Data kicked some borg ass and then fed his cat lunch.</em>"
    #pas de 'slides' --> cette définition sera affichée dans le glossaire de tous les écrans
  ,
    term: "Hipsterectomy"
    meaning: "The removal or dismissal of what is largely accepted to be cool or trendy. The process of de-hipsterizing someone or something."
    #cet écran ne sera disponible que pour l'écran 10001
    slides:[10001]
  ,
    term: "Graph"
    meaning: "A slang term for a sketching of what someone plans on tagging. graffiti. <br><em>NOT A CHART!</em>"
  ]

###

Les slides correspondent aux écrans visibles dans les différents 'chapitres' de l'application
Les slides correspondent à une liste de configuration
Chaque élément de la liste est entre bracket : {ma configuration}
ou plutôt :
[
  {
    ma configuration 1
  }
  {
    ma configuration 2
  }
]

###

slides: [
#Le niveau 0 correspond au squelette de l'application
#Tous les autres éléments viennent s'y rattacher
#2 informations : le level et l'id (qui doit être UNIQUE)
  {
    level: 0
    id: 0
  }
  #Les niveaux 1 définissent des chapitres (qui peuvent contenir des sous-chapitres ou directement des écrans)
  #3 informations :
  # - le level (1 forcémment!),
  # - l'id (UNIQUE! A vous de le choisir comme vous le souhaitez nous préconisons d'uiliser des 10aines)
  # - le titre : à vous de le choisir, n'est pas forcémment unique
  # Les levels 1 ont forcémment pour parent le level 0
  {
    level: 1
    id: 10
    title: "Basic"
  }
  {
    level: 2
    id: 101
    parent_id:10
    title: "Filtering"
  }
  {
    level: 2
    id: 102
    parent_id:10
    title: "Arithmetics"
  }
  {
    level: 2
    id: 103
    parent_id:10
    title: "Grouping"
  }
  {
    level: 2
    id: 104
    parent_id:10
    title: "Pivoting"
  }
  #Here is a simple barchart. Go take a look at it.
  #We're going to see how to filter the data using some of mongo operator
  #Go here for detailed information: https://docs.mongodb.com/manual/reference/operator/query
  {
    level: 3
    parent_id: 101
    id: 10001
    title: "Simple Barchart"

    filters:
      'bottom-right':
        on:'bottom_filter'
        type:'buttons'

    chartOptions:
      data:
        query:
          domain: "barchart"
        precision:
          "my_value": "my_precision"

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "my_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "my_value": "unite"
  }

  #Let's remove the bottom filter and display only the data corresponding to 'metric1'

  {
    level: 3
    parent_id: 101
    id: 10002
    title: "Simple Filter"

    chartOptions:
      data:
        query:
          domain: "barchart"
          bottom_filter:'metric1'#It's as simple as that :)
        precision:
          "my_value": "my_precision"

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "my_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "my_value": "unite"
  }

  #Let's remove the bottom filter and display only the data corresponding to 'metric1' using the $match operator.
  #Not useful for the moment but will see how operators can be chained to performe complex transformations.

  {
    level: 3
    parent_id: 101
    id: 10003
    title: "Simple Filter With match"

    chartOptions:
      data:
        query:[#Notice that that the aggregation operators have to be enclosed inside []
          $match:#This is new!
            domain: "barchart"
            bottom_filter:'metric1'
        ]#Notice that that the aggregation operators have to be enclosed inside []
        precision:
          "my_value": "my_precision"

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "my_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "my_value": "unite"
  }

  #Ok now let's say that we would like to display only the years post 2015 (included).
  #How would we do that?

  {
    level: 3
    parent_id: 101
    id: 10004
    title: "Filter with comparison operator"

    filters:
      'bottom-right':
        on:'bottom_filter'
        type:'buttons'

    chartOptions:
      data:
        query:[
          $match:
            domain: "barchart"
            my_date: $gte: 2015#How would you select numbres below 2015? Use mongo doc https://docs.mongodb.com/manual/reference/operator/query/
        ]
        precision:
          "my_value": "my_precision"

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "my_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "my_value": "unite"
  }

  #Ok now let's say that we would like to display only the years post 2015 (included).
  #How would we do that?

  {
    level: 3
    parent_id: 101
    id: 10005
    title: "Filter with comparison operator"

    filters:
      'bottom-right':
        on:'bottom_filter'
        type:'buttons'

    chartOptions:
      data:
        query:[
          $match:
            domain: "barchart"
            my_date: $in: [2015,2016]#How would you exclude numbers that are in that list? Use mongo doc https://docs.mongodb.com/manual/reference/operator/query/
        ]
        precision:
          "my_value": "my_precision"

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "my_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "my_value": "unite"
  }

  #Missing values are tricky.
  #They sometimes mean just that, that we have no values for them.
  #And we can choose to filter them out.
  #Let's see how to do that.

  {
    level: 3
    parent_id: 101
    id: 10006
    title: "Filter null values"

    filters:
      'bottom-right':
        on:'bottom_filter'
        type:'buttons'

    chartOptions:
      data:
        query:[
          $match:
            domain: "barchart_missing_values"
            my_value:$ne:null#as simple as that :)
        ]

        precision:
          "my_value": "my_precision"

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "my_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "my_value": "unite"
  }

  #Missing values are tricky.
  #They sometimes mean just that, that we have no values for them.
  #But sometimes they shall in fact be interpreted as = 0.
  #So let's introduce postprocess operations which are operations that you can choose to apply on the data you're querying.

  {
    level: 3
    parent_id: 101
    id: 10007
    title: "Replace null values"

    filters:
      'bottom-right':
        on:'bottom_filter'
        type:'buttons'

    chartOptions:
      data:
        query:[
          $match:
            domain: "barchart_missing_values"
        ]

        precision:
          "my_value": "my_precision"

        postprocess:[#this is new!
          fillna:
            column:'my_value'#column from which null values will be replace by the below 'value'
            value:0#value you wish to use as replacement
        ]

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "my_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "my_value": "unite"
  }

    #Sometimes the label in the data are not clean and rather than changing it directly (which is generally the best option!)
    #you prefer to change it directly in the configuration.
    #You would use another postprocess operation to do that : rename.
    #As an example let's say we want to replace "yeaaah" and "yooo", the stupid values in our uppper-right filter by meaningful names.
    #Let's do that!

  {
    level: 3
    parent_id: 102
    id: 10201
    title: "Rename values"

    filters:
      'bottom-right':
        on:'bottom_filter'
        type:'buttons'

    chartOptions:
      data:
        query:[
          $match:
            domain: "barchart"
        ]

        precision:
          "my_value": "my_precision"

        postprocess:[#this is new!
          rename:
            values:#This is important: here we're not renaming the column of our data but the values in a column
             'yeaaah':
               'fr': 'Meaningful Name!'
               'en': 'Meaningful Name!'
             'yooo':
               'fr': 'Another Meaningful Name!'
               'en': 'Another Meaningful Name!'
               ###
                'fr' and 'en' corresponds to the language of your application, by default small apps are in french -> 'fr'?
                This allow you use different renaming when your app has traduction enabled.
                By default the available locals are fr and en so you have to give a renaming label for each (even if it's the same)
                See the documentation for more information on traduction https://docs.toucantoco.com/concepteur/tell-your-stories/finetune-experience/04-translation.html#translation
               ###

        ]

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "my_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "my_value": "unite"
  }

  #If you look for a way to rename columns of your data and not labels just swich the parameters of 'rename' to columns

  {
    level: 3
    parent_id: 102
    id: 10202
    title: "Rename columns"

    filters:
      'bottom-right':
        on:'unambiguous filter column name'#I have changed the name of that column below. So I have to change it there also.
        type:'buttons'

    chartOptions:
      data:
        query:[
          $match:
            domain: "barchart"
        ]

        precision:
          "my_value": "my_precision"

        postprocess:[
          rename:
            columns:#We changed that from values to columns
             'bottom_filter':
               'fr': 'unambiguous filter column name'
               'en': 'unambiguous filter column name'
               ###
                'fr' corresponds to the language of your application, by default small apps are in french -> 'fr'?
                This allow you use different renaming when your app has traduction enabled.
                See the documentation for more information on traduction https://docs.toucantoco.com/concepteur/tell-your-stories/finetune-experience/04-translation.html#translation
               ###

        ]

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "my_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "my_value": "unite"
  }

    #Ok, let's now look at some basic arithmetic.
    #Let's say you want to divide all the data by 100, how would you do that?

  {
    level: 3
    parent_id: 101
    id: 10008
    title: "Division"

    filters:
      'bottom-right':
        on:'unambiguous filter column name'#I have changed the name of that column below. So I have to change it there also.
        type:'buttons'

    chartOptions:
      data:
        query:[
          $match:
            domain: "barchart_missing"
          ,
            $addFields:
              new_value:$divide:['$my_value',100]
        ]

        precision:
          "new_value": "my_precision"

      chartType: "barchart"

      filters:
        "upper-middle":
          on: "middle_filter"
          type: "buttons"

      value: "new_value"
      label: "my_date"
      groups: "my_serie"

      units:
        "new_value": "unite"
  }
]
